# Admin
GET         /                            controllers.admin.AdminController.index()
GET         /enable                      controllers.admin.AdminController.enable()
GET         /sandbox                     controllers.admin.SandboxController.defaultSandbox()
GET         /sandbox/:key                controllers.admin.SandboxController.sandbox(key)

GET         /wipe                        controllers.admin.AdminController.wipeSchema(key)

GET         /trace/connection/:id        controllers.admin.TraceController.traceConnection(id: java.util.UUID)
GET         /trace/client/:id            controllers.admin.TraceController.traceClient(id: java.util.UUID)
GET         /trace/brawl/:id             controllers.admin.TraceController.traceBrawl(id: java.util.UUID)

GET         /observe/random              controllers.admin.ObserveController.observeRandomBrawl()
GET         /observe/:id                 controllers.admin.ObserveController.observeBrawlAsAdmin(id: java.util.UUID)
GET         /observe/:id/:as             controllers.admin.ObserveController.observeBrawlAs(id: java.util.UUID, as: java.util.UUID)

GET         /users                       controllers.admin.UserController.userList(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /users/:id                   controllers.admin.UserController.userDetail(id: java.util.UUID)
GET         /users/:id/remove            controllers.admin.UserController.removeUser(id: java.util.UUID)

GET         /brawls                      controllers.admin.BrawlHistoryController.brawlList(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /brawls/:id                  controllers.admin.BrawlHistoryController.brawlDetail(id: java.util.UUID)
GET         /brawls/:id/remove           controllers.admin.BrawlHistoryController.removeBrawl(id: java.util.UUID)

GET         /analytics/list              controllers.admin.AnalyticsEventController.eventList(q ?= "", sortBy ?= "created", page: Int ?= 0)
GET         /analytics/:id               controllers.admin.AnalyticsEventController.eventDetail(id: java.util.UUID)
GET         /analytics/:id/remove        controllers.admin.AnalyticsEventController.removeEvent(id: java.util.UUID)

GET         /requests                    controllers.admin.RequestLogController.requestList(q ?= "", sortBy ?= "started", page: Int ?= 0)

GET         /feedback/:key               controllers.admin.FeedbackController.list(key, q ?= "", sortBy ?= "occurred", page: Int ?= 0)
GET         /feedback/:id/note           controllers.admin.FeedbackController.feedbackNoteForm(id: java.util.UUID)
POST        /feedback/:id/note           controllers.admin.FeedbackController.feedbackNotePost(id: java.util.UUID)
GET         /feedback/:id/remove         controllers.admin.FeedbackController.removeFeedback(id: java.util.UUID)

GET         /constants                   controllers.admin.AdminController.constants()
GET         /patterns                    controllers.admin.AdminController.gemPatterns()

GET         /test                        controllers.admin.TestController.list()
GET         /test/:name                  controllers.admin.TestController.run(name, json: Boolean ?= false)

GET         /logs                        controllers.admin.LogController.list()
GET         /logs/:name                  controllers.admin.LogController.view(name)

GET         /report/trend                controllers.admin.ReportController.trend()
GET         /report/requests             controllers.admin.ReportController.requests()
GET         /report/email                controllers.admin.ReportController.email()
GET         /report/ad-hoc               controllers.admin.AdHocQueryController.queryList(query: Option[java.util.UUID] ?= None, action: Option[String] ?= None)
POST        /report/ad-hoc/run           controllers.admin.AdHocQueryController.run()
